"/| ", " / ")),
Premiere = as.Date(str_replace_all(str_replace_all(Premiere, ",", ""), " ", "-"), "%B-%d-%Y"),
Episodes = strtoi(ifelse(!is.na(str_match(Seasons, "([0-9]+) (episode*)")[,2]),
str_match(Seasons, "([0-9]+) (episode*)")[,2],
NA)),
Seasons = strtoi(ifelse(!is.na(str_match(Seasons, "([0-9]) (season.*|part.*|volume.*)")[,2]),
str_match(Seasons, "([0-9]) (season.*|part.*|volume.*)")[,2],
NA)),
Min_Time = strtoi(ifelse(!is.na(str_match(Runtime, "([0-9]+)-([0-9]+)")[,2]),
str_match(Runtime, "([0-9]+)-([0-9]+)")[,2],
str_match(Runtime, "([0-9]+)")[,2])),
Max_Time = strtoi(ifelse(!is.na(str_match(Runtime, "([0-9]+)-([0-9]+)")[,3]),
str_match(Runtime, "([0-9]+)-([0-9]+)")[,3],
str_match(Runtime, "([0-9]+)")[,2])),
Language = Language,
Status = Status
)
anycharacter <- "([a-zA-Z]|-+)"
genre_to_uppercase <- function(genre) {
curr <- ""
all_genres <- ""
c <- strsplit(genre, "")[[1]]
print("Printing in front of the for loop")
for (i in 1:length(c)) {
if (grepl(anycharacter, c[i])) {
curr <- gsub(" ", "", str_squish(paste(curr, c[i])))
}
if (!grepl(anycharacter, c[i]) | i == length(c)) {
if (i > 1 & grepl(anycharacter, c[i-1])) {
whole_word = strsplit(curr, "")[[1]]
single_genre <- ""
for (j in 1:length(whole_word)) {
if (j == 1) {
single_genre <- gsub(" ", "", str_squish(toupper(whole_word[j])))
} else {
single_genre <- gsub(" ", "", str_squish(paste(single_genre, whole_word[j])))
}
}
if (i != length(strsplit(genres, "")[[1]])) {
all_genres <- str_squish(paste(all_genres, single_genre, "/"))
} else {
all_genres <- paste(all_genres, single_genre)
}
}
curr <- ""
}
}
print("Printing after the for loop")
return(all_genres)
}
genres_to_uppercase <- function(genres) {
genres_vector <- c()
for (genre in genres) {
genres_vector <- paste(genres_vector, genre_to_uppercase(genre))
}
}
netflix_originals <- filter(netflix_originals,
!grepl("Pending|pending", Title),
Title != "Awaiting release",
!grepl("Miniseries|miniseries", Title),
!grepl("Renewed|renewed", Title),
!grepl("due to premiere", Title))
for (variable in str_replace_all(
str_squish(
str_replace_all(
str_replace_all(
str_replace_all(
str_replace_all(select(netflix_originals, Genre), "series|procedural", ""),
"Science fiction", "Science-Fiction"),
"(C|c)oming-of-age ", ""),
"(C|c)omedy-(D|d)rama", "Dramedy")
),
"/| ", " / ")) {
print("executed once")
}
transmuted <- transmute(netflix_originals,
Title = Title,
Genre = genres_to_uppercase(str_replace_all(
str_squish(
str_replace_all(
str_replace_all(
str_replace_all(
str_replace_all(Genre, "series|procedural", ""),
"Science fiction", "Science-Fiction"),
"(C|c)oming-of-age ", ""),
"(C|c)omedy-(D|d)rama", "Dramedy")
),
"/| ", " / ")),
Premiere = as.Date(str_replace_all(str_replace_all(Premiere, ",", ""), " ", "-"), "%B-%d-%Y"),
Episodes = strtoi(ifelse(!is.na(str_match(Seasons, "([0-9]+) (episode*)")[,2]),
str_match(Seasons, "([0-9]+) (episode*)")[,2],
NA)),
Seasons = strtoi(ifelse(!is.na(str_match(Seasons, "([0-9]) (season.*|part.*|volume.*)")[,2]),
str_match(Seasons, "([0-9]) (season.*|part.*|volume.*)")[,2],
NA)),
Min_Time = strtoi(ifelse(!is.na(str_match(Runtime, "([0-9]+)-([0-9]+)")[,2]),
str_match(Runtime, "([0-9]+)-([0-9]+)")[,2],
str_match(Runtime, "([0-9]+)")[,2])),
Max_Time = strtoi(ifelse(!is.na(str_match(Runtime, "([0-9]+)-([0-9]+)")[,3]),
str_match(Runtime, "([0-9]+)-([0-9]+)")[,3],
str_match(Runtime, "([0-9]+)")[,2])),
Language = Language,
Status = Status
)
anycharacter <- "([a-zA-Z]|-+)"
genre_to_uppercase <- function(genre) {
curr <- ""
all_genres <- ""
c <- strsplit(genre, "")[[1]]
print("Printing in front of the for loop")
for (i in 1:length(c)) {
if (grepl(anycharacter, c[i])) {
curr <- gsub(" ", "", str_squish(paste(curr, c[i])))
}
if (!grepl(anycharacter, c[i]) | i == length(c)) {
if (i > 1 & grepl(anycharacter, c[i-1])) {
whole_word = strsplit(curr, "")[[1]]
single_genre <- ""
for (j in 1:length(whole_word)) {
if (j == 1) {
single_genre <- gsub(" ", "", str_squish(toupper(whole_word[j])))
} else {
single_genre <- gsub(" ", "", str_squish(paste(single_genre, whole_word[j])))
}
}
if (i != length(c)) {
all_genres <- str_squish(paste(all_genres, single_genre, "/"))
} else {
all_genres <- paste(all_genres, single_genre)
}
}
curr <- ""
}
}
print("Printing after the for loop")
return(all_genres)
}
genres_to_uppercase <- function(genres) {
genres_vector <- c()
for (genre in genres) {
genres_vector <- paste(genres_vector, genre_to_uppercase(genre))
}
}
netflix_originals <- filter(netflix_originals,
!grepl("Pending|pending", Title),
Title != "Awaiting release",
!grepl("Miniseries|miniseries", Title),
!grepl("Renewed|renewed", Title),
!grepl("due to premiere", Title))
for (variable in str_replace_all(
str_squish(
str_replace_all(
str_replace_all(
str_replace_all(
str_replace_all(select(netflix_originals, Genre), "series|procedural", ""),
"Science fiction", "Science-Fiction"),
"(C|c)oming-of-age ", ""),
"(C|c)omedy-(D|d)rama", "Dramedy")
),
"/| ", " / ")) {
print("executed once")
}
transmuted <- transmute(netflix_originals,
Title = Title,
Genre = genres_to_uppercase(str_replace_all(
str_squish(
str_replace_all(
str_replace_all(
str_replace_all(
str_replace_all(Genre, "series|procedural", ""),
"Science fiction", "Science-Fiction"),
"(C|c)oming-of-age ", ""),
"(C|c)omedy-(D|d)rama", "Dramedy")
),
"/| ", " / ")),
Premiere = as.Date(str_replace_all(str_replace_all(Premiere, ",", ""), " ", "-"), "%B-%d-%Y"),
Episodes = strtoi(ifelse(!is.na(str_match(Seasons, "([0-9]+) (episode*)")[,2]),
str_match(Seasons, "([0-9]+) (episode*)")[,2],
NA)),
Seasons = strtoi(ifelse(!is.na(str_match(Seasons, "([0-9]) (season.*|part.*|volume.*)")[,2]),
str_match(Seasons, "([0-9]) (season.*|part.*|volume.*)")[,2],
NA)),
Min_Time = strtoi(ifelse(!is.na(str_match(Runtime, "([0-9]+)-([0-9]+)")[,2]),
str_match(Runtime, "([0-9]+)-([0-9]+)")[,2],
str_match(Runtime, "([0-9]+)")[,2])),
Max_Time = strtoi(ifelse(!is.na(str_match(Runtime, "([0-9]+)-([0-9]+)")[,3]),
str_match(Runtime, "([0-9]+)-([0-9]+)")[,3],
str_match(Runtime, "([0-9]+)")[,2])),
Language = Language,
Status = Status
)
transmuted
anycharacter <- "([a-zA-Z]|-+)"
genre_to_uppercase <- function(genre) {
curr <- ""
all_genres <- ""
c <- strsplit(genre, "")[[1]]
print("Printing in front of the for loop")
for (i in 1:length(c)) {
if (grepl(anycharacter, c[i])) {
curr <- gsub(" ", "", str_squish(paste(curr, c[i])))
}
if (!grepl(anycharacter, c[i]) | i == length(c)) {
if (i > 1 & grepl(anycharacter, c[i-1])) {
whole_word = strsplit(curr, "")[[1]]
single_genre <- ""
for (j in 1:length(whole_word)) {
if (j == 1) {
single_genre <- gsub(" ", "", str_squish(toupper(whole_word[j])))
} else {
single_genre <- gsub(" ", "", str_squish(paste(single_genre, whole_word[j])))
}
}
if (i != length(c)) {
all_genres <- str_squish(paste(all_genres, single_genre, "/"))
} else {
all_genres <- paste(all_genres, single_genre)
}
}
curr <- ""
}
}
print("Printing after the for loop")
return(all_genres)
}
genres_to_uppercase <- function(genres) {
genres_vector <- c()
for (genre in genres) {
genres_vector <- paste(genres_vector, genre_to_uppercase(genre))
}
return(genres_vector)
}
netflix_originals <- filter(netflix_originals,
!grepl("Pending|pending", Title),
Title != "Awaiting release",
!grepl("Miniseries|miniseries", Title),
!grepl("Renewed|renewed", Title),
!grepl("due to premiere", Title))
for (variable in str_replace_all(
str_squish(
str_replace_all(
str_replace_all(
str_replace_all(
str_replace_all(select(netflix_originals, Genre), "series|procedural", ""),
"Science fiction", "Science-Fiction"),
"(C|c)oming-of-age ", ""),
"(C|c)omedy-(D|d)rama", "Dramedy")
),
"/| ", " / ")) {
print("executed once")
}
transmuted <- transmute(netflix_originals,
Title = Title,
Genre = genres_to_uppercase(str_replace_all(
str_squish(
str_replace_all(
str_replace_all(
str_replace_all(
str_replace_all(Genre, "series|procedural", ""),
"Science fiction", "Science-Fiction"),
"(C|c)oming-of-age ", ""),
"(C|c)omedy-(D|d)rama", "Dramedy")
),
"/| ", " / ")),
Premiere = as.Date(str_replace_all(str_replace_all(Premiere, ",", ""), " ", "-"), "%B-%d-%Y"),
Episodes = strtoi(ifelse(!is.na(str_match(Seasons, "([0-9]+) (episode*)")[,2]),
str_match(Seasons, "([0-9]+) (episode*)")[,2],
NA)),
Seasons = strtoi(ifelse(!is.na(str_match(Seasons, "([0-9]) (season.*|part.*|volume.*)")[,2]),
str_match(Seasons, "([0-9]) (season.*|part.*|volume.*)")[,2],
NA)),
Min_Time = strtoi(ifelse(!is.na(str_match(Runtime, "([0-9]+)-([0-9]+)")[,2]),
str_match(Runtime, "([0-9]+)-([0-9]+)")[,2],
str_match(Runtime, "([0-9]+)")[,2])),
Max_Time = strtoi(ifelse(!is.na(str_match(Runtime, "([0-9]+)-([0-9]+)")[,3]),
str_match(Runtime, "([0-9]+)-([0-9]+)")[,3],
str_match(Runtime, "([0-9]+)")[,2])),
Language = Language,
Status = Status
)
transmuted
anycharacter <- "([a-zA-Z]|-+)"
genre_to_uppercase <- function(genre) {
curr <- ""
all_genres <- ""
c <- strsplit(genre, "")[[1]]
print("Printing in front of the for loop")
for (i in 1:length(c)) {
if (grepl(anycharacter, c[i])) {
curr <- gsub(" ", "", str_squish(paste(curr, c[i])))
}
if (!grepl(anycharacter, c[i]) | i == length(c)) {
if (i > 1 & grepl(anycharacter, c[i-1])) {
whole_word = strsplit(curr, "")[[1]]
single_genre <- ""
for (j in 1:length(whole_word)) {
if (j == 1) {
single_genre <- gsub(" ", "", str_squish(toupper(whole_word[j])))
} else {
single_genre <- gsub(" ", "", str_squish(paste(single_genre, whole_word[j])))
}
}
if (i != length(c)) {
all_genres <- str_squish(paste(all_genres, single_genre, "/"))
} else {
all_genres <- paste(all_genres, single_genre)
}
}
curr <- ""
}
}
print("Printing after the for loop")
return(all_genres)
}
genres_to_uppercase <- function(genres) {
genres_vector <- c()
for (genre in genres) {
genres_vector <- paste(genres_vector, genre_to_uppercase(genre))
}
print(genres_vector)
return(genres_vector)
}
netflix_originals <- filter(netflix_originals,
!grepl("Pending|pending", Title),
Title != "Awaiting release",
!grepl("Miniseries|miniseries", Title),
!grepl("Renewed|renewed", Title),
!grepl("due to premiere", Title))
transmuted <- transmute(netflix_originals,
Title = Title,
Genre = genres_to_uppercase(str_replace_all(
str_squish(
str_replace_all(
str_replace_all(
str_replace_all(
str_replace_all(Genre, "series|procedural", ""),
"Science fiction", "Science-Fiction"),
"(C|c)oming-of-age ", ""),
"(C|c)omedy-(D|d)rama", "Dramedy")
),
"/| ", " / ")),
Premiere = as.Date(str_replace_all(str_replace_all(Premiere, ",", ""), " ", "-"), "%B-%d-%Y"),
Episodes = strtoi(ifelse(!is.na(str_match(Seasons, "([0-9]+) (episode*)")[,2]),
str_match(Seasons, "([0-9]+) (episode*)")[,2],
NA)),
Seasons = strtoi(ifelse(!is.na(str_match(Seasons, "([0-9]) (season.*|part.*|volume.*)")[,2]),
str_match(Seasons, "([0-9]) (season.*|part.*|volume.*)")[,2],
NA)),
Min_Time = strtoi(ifelse(!is.na(str_match(Runtime, "([0-9]+)-([0-9]+)")[,2]),
str_match(Runtime, "([0-9]+)-([0-9]+)")[,2],
str_match(Runtime, "([0-9]+)")[,2])),
Max_Time = strtoi(ifelse(!is.na(str_match(Runtime, "([0-9]+)-([0-9]+)")[,3]),
str_match(Runtime, "([0-9]+)-([0-9]+)")[,3],
str_match(Runtime, "([0-9]+)")[,2])),
Language = Language,
Status = Status
)
transmuted
anycharacter <- "([a-zA-Z]|-+)"
genre_to_uppercase <- function(genre) {
curr <- ""
all_genres <- ""
c <- strsplit(genre, "")[[1]]
print("Printing in front of the for loop")
for (i in 1:length(c)) {
if (grepl(anycharacter, c[i])) {
curr <- gsub(" ", "", str_squish(paste(curr, c[i])))
}
if (!grepl(anycharacter, c[i]) | i == length(c)) {
if (i > 1 & grepl(anycharacter, c[i-1])) {
whole_word = strsplit(curr, "")[[1]]
single_genre <- ""
for (j in 1:length(whole_word)) {
if (j == 1) {
single_genre <- gsub(" ", "", str_squish(toupper(whole_word[j])))
} else {
single_genre <- gsub(" ", "", str_squish(paste(single_genre, whole_word[j])))
}
}
if (i != length(c)) {
all_genres <- str_squish(paste(all_genres, single_genre, "/"))
} else {
all_genres <- paste(all_genres, single_genre)
}
}
curr <- ""
}
}
print("Printing after the for loop")
return(all_genres)
}
genres_to_uppercase <- function(genres) {
genres_vector <- c()
for (genre in genres) {
genres_vector <- paste(genres_vector, c(genre_to_uppercase(genre)))
}
print(genres_vector)
return(genres_vector)
}
netflix_originals <- filter(netflix_originals,
!grepl("Pending|pending", Title),
Title != "Awaiting release",
!grepl("Miniseries|miniseries", Title),
!grepl("Renewed|renewed", Title),
!grepl("due to premiere", Title))
transmuted <- transmute(netflix_originals,
Title = Title,
Genre = genres_to_uppercase(str_replace_all(
str_squish(
str_replace_all(
str_replace_all(
str_replace_all(
str_replace_all(Genre, "series|procedural", ""),
"Science fiction", "Science-Fiction"),
"(C|c)oming-of-age ", ""),
"(C|c)omedy-(D|d)rama", "Dramedy")
),
"/| ", " / ")),
Premiere = as.Date(str_replace_all(str_replace_all(Premiere, ",", ""), " ", "-"), "%B-%d-%Y"),
Episodes = strtoi(ifelse(!is.na(str_match(Seasons, "([0-9]+) (episode*)")[,2]),
str_match(Seasons, "([0-9]+) (episode*)")[,2],
NA)),
Seasons = strtoi(ifelse(!is.na(str_match(Seasons, "([0-9]) (season.*|part.*|volume.*)")[,2]),
str_match(Seasons, "([0-9]) (season.*|part.*|volume.*)")[,2],
NA)),
Min_Time = strtoi(ifelse(!is.na(str_match(Runtime, "([0-9]+)-([0-9]+)")[,2]),
str_match(Runtime, "([0-9]+)-([0-9]+)")[,2],
str_match(Runtime, "([0-9]+)")[,2])),
Max_Time = strtoi(ifelse(!is.na(str_match(Runtime, "([0-9]+)-([0-9]+)")[,3]),
str_match(Runtime, "([0-9]+)-([0-9]+)")[,3],
str_match(Runtime, "([0-9]+)")[,2])),
Language = Language,
Status = Status
)
transmuted
anycharacter <- "([a-zA-Z]|-+)"
genre_to_uppercase <- function(genre) {
curr <- ""
all_genres <- ""
c <- strsplit(genre, "")[[1]]
print("Printing in front of the for loop")
for (i in 1:length(c)) {
if (grepl(anycharacter, c[i])) {
curr <- gsub(" ", "", str_squish(paste(curr, c[i])))
}
if (!grepl(anycharacter, c[i]) | i == length(c)) {
if (i > 1 & grepl(anycharacter, c[i-1])) {
whole_word = strsplit(curr, "")[[1]]
single_genre <- ""
for (j in 1:length(whole_word)) {
if (j == 1) {
single_genre <- gsub(" ", "", str_squish(toupper(whole_word[j])))
} else {
single_genre <- gsub(" ", "", str_squish(paste(single_genre, whole_word[j])))
}
}
if (i != length(c)) {
all_genres <- str_squish(paste(all_genres, single_genre, "/"))
} else {
all_genres <- paste(all_genres, single_genre)
}
}
curr <- ""
}
}
print("Printing after the for loop")
return(all_genres)
}
genres_to_uppercase <- function(genres) {
genres_vector <- c()
for (genre in genres) {
genres_vector <- c(genres_vector, c(genre_to_uppercase(genre)))
}
print(genres_vector)
return(genres_vector)
}
netflix_originals <- filter(netflix_originals,
!grepl("Pending|pending", Title),
Title != "Awaiting release",
!grepl("Miniseries|miniseries", Title),
!grepl("Renewed|renewed", Title),
!grepl("due to premiere", Title))
transmuted <- transmute(netflix_originals,
Title = Title,
Genre = genres_to_uppercase(str_replace_all(
str_squish(
str_replace_all(
str_replace_all(
str_replace_all(
str_replace_all(Genre, "series|procedural", ""),
"Science fiction", "Science-Fiction"),
"(C|c)oming-of-age ", ""),
"(C|c)omedy-(D|d)rama", "Dramedy")
),
"/| ", " / ")),
Premiere = as.Date(str_replace_all(str_replace_all(Premiere, ",", ""), " ", "-"), "%B-%d-%Y"),
Episodes = strtoi(ifelse(!is.na(str_match(Seasons, "([0-9]+) (episode*)")[,2]),
str_match(Seasons, "([0-9]+) (episode*)")[,2],
NA)),
Seasons = strtoi(ifelse(!is.na(str_match(Seasons, "([0-9]) (season.*|part.*|volume.*)")[,2]),
str_match(Seasons, "([0-9]) (season.*|part.*|volume.*)")[,2],
NA)),
Min_Time = strtoi(ifelse(!is.na(str_match(Runtime, "([0-9]+)-([0-9]+)")[,2]),
str_match(Runtime, "([0-9]+)-([0-9]+)")[,2],
str_match(Runtime, "([0-9]+)")[,2])),
Max_Time = strtoi(ifelse(!is.na(str_match(Runtime, "([0-9]+)-([0-9]+)")[,3]),
str_match(Runtime, "([0-9]+)-([0-9]+)")[,3],
str_match(Runtime, "([0-9]+)")[,2])),
Language = Language,
Status = Status
)
transmuted
