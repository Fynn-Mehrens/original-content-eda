series_percentages <- rbind(series_percentages,
data.frame(Service = as.factor(c(service)), Premiere_Year = c(year), Percentage = c(ifelse(nr_series == 0,
ifelse(nr_films == 0, 50, 0), ifelse(nr_films == 0, 100, nr_series / (nr_series + nr_films) * 100)))))
}
}
return(series_percentages)
}
percentage_of_series(series_and_movies)
original_colors <- c(rgb(229/255, 9/255, 20/255, 1),
rgb(28/255, 231/255, 131/255, 1),
rgb(15/255, 27/255, 77/255, 1),
rgb(0, 0, 0, 1)
)
ggplot() +
geom_line(data = filter(series_and_movies, Format == "Film"), mapping = aes(x = Premiere_Year, y = Entries, colour = as.factor(Service)), label = "Movie") +
labs(colour = "Streaming Services", title = "Amount of released Movies by streaming services", x = "Year", y = "Number of movies") +
scale_colour_manual(values = original_colors)
series_and_movies <- as_tibble(filter(prem_year %>%
group_by(Service, Premiere_Year = strtoi(Premiere_Year), Format) %>%
summarise(Entries = length(Service)), Format == "Film" | Format == "Series"))
series_and_movies
percentage_of_series <- function(dataframe) {
series_percentages <- data.frame(Service = c(), Premiere_Year = c(), Series_Percentage = c())
services <- c("Netflix", "Amazon Prime Video", "Hulu", "Disney+")
years <- c(2000:2020)
for (service in services) {
service_rows <- filter(dataframe, Service == service)
for (year in years) {
nr_series <- sum(pull(filter(service_rows, Format == "Series", Premiere_Year == year), Entries))
nr_films <- sum(pull(filter(service_rows, Format == "Film", Premiere_Year == year), Entries))
series_percentages <- rbind(series_percentages,
data.frame(Service = as.factor(c(service)), Premiere_Year = c(year), Percentage = c(ifelse(nr_series == 0,
ifelse(nr_films == 0, 50, 0), ifelse(nr_films == 0, 100, nr_series / (nr_series + nr_films) * 100)))))
}
}
return(series_percentages)
}
percentage_of_series(series_and_movies)
original_colors <- c(rgb(229/255, 9/255, 20/255, 1),
rgb(0/255, 163/255, 218/255, 1),
rgb(28/255, 231/255, 131/255, 1),
rgb(15/255, 27/255, 77/255, 1)
rgb(0, 0, 0, 1)
series_and_movies <- as_tibble(filter(prem_year %>%
group_by(Service, Premiere_Year = strtoi(Premiere_Year), Format) %>%
summarise(Entries = length(Service)), Format == "Film" | Format == "Series"))
series_and_movies
percentage_of_series <- function(dataframe) {
series_percentages <- data.frame(Service = c(), Premiere_Year = c(), Series_Percentage = c())
services <- c("Netflix", "Amazon Prime Video", "Hulu", "Disney+")
years <- c(2000:2020)
for (service in services) {
service_rows <- filter(dataframe, Service == service)
for (year in years) {
nr_series <- sum(pull(filter(service_rows, Format == "Series", Premiere_Year == year), Entries))
nr_films <- sum(pull(filter(service_rows, Format == "Film", Premiere_Year == year), Entries))
series_percentages <- rbind(series_percentages,
data.frame(Service = as.factor(c(service)), Premiere_Year = c(year), Percentage = c(ifelse(nr_series == 0,
ifelse(nr_films == 0, 50, 0), ifelse(nr_films == 0, 100, nr_series / (nr_series + nr_films) * 100)))))
}
}
return(series_percentages)
}
percentage_of_series(series_and_movies)
original_colors <- c(rgb(229/255, 9/255, 20/255, 1),
rgb(0/255, 163/255, 218/255, 1),
rgb(28/255, 231/255, 131/255, 1),
rgb(15/255, 27/255, 77/255, 1),
rgb(0, 0, 0, 1)
)
ggplot() +
geom_line(data = filter(series_and_movies, Format == "Film"), mapping = aes(x = Premiere_Year, y = Entries, colour = as.factor(Service)), label = "Movie") +
labs(colour = "Streaming Services", title = "Amount of released Movies by streaming services", x = "Year", y = "Number of movies") +
scale_colour_manual(values = original_colors)
original_colors <- c(rgb(229/255, 9/255, 20/255, 1),
rgb(0/255, 163/255, 218/255, 1),
rgb(28/255, 231/255, 131/255, 1),
rgb(15/255, 27/255, 77/255, 1)
)
ggplot() +
geom_line(data = filter(series_and_movies, Format == "Series"), mapping = aes(x = Premiere_Year, y = Entries, colour = as.factor(Service)), label = "Movie") +
labs(colour = "Streaming Services", title = "Amount of released Series by streaming services", x = "Year", y = "Number of series") +
scale_colour_manual(values = original_colors)
series_and_movies <- as_tibble(filter(prem_year %>%
group_by(Service, Premiere_Year = strtoi(Premiere_Year), Format) %>%
summarise(Entries = length(Service)), Format == "Film" | Format == "Series"))
series_and_movies
percentage_of_series <- function(dataframe) {
series_percentages <- data.frame(Service = c(), Premiere_Year = c(), Series_Percentage = c())
services <- c("Netflix", "Amazon Prime Video", "Hulu", "Disney+")
years <- c(2000:2020)
for (service in services) {
service_rows <- filter(dataframe, Service == service)
for (year in years) {
nr_series <- sum(pull(filter(service_rows, Format == "Series", Premiere_Year == year), Entries))
nr_films <- sum(pull(filter(service_rows, Format == "Film", Premiere_Year == year), Entries))
series_percentages <- rbind(series_percentages,
data.frame(Service = as.factor(c(service)), Premiere_Year = c(year), Percentage = c(ifelse(nr_series == 0,
ifelse(nr_films == 0, 50, 0), ifelse(nr_films == 0, 100, nr_series / (nr_series + nr_films) * 100)))))
}
}
return(series_percentages)
}
percentage_of_series(series_and_movies)
original_colors <- c(rgb(229/255, 9/255, 20/255, 1),
rgb(0/255, 163/255, 218/255, 1),
rgb(28/255, 231/255, 131/255, 1),
rgb(15/255, 27/255, 77/255, 1),
rgb(0, 0, 0, 1)
)
ggplot() +
geom_line(data = filter(series_and_movies, Format == "Film"), mapping = aes(x = Premiere_Year, y = Entries, colour = as.factor(Service)), label = "Movie") +
labs(colour = "Streaming Services", title = "Amount of released Movies by streaming services", x = "Year", y = "Number of movies") +
scale_colour_manual(values = original_colors)
original_colors <- c(rgb(229/255, 9/255, 20/255, 1),
rgb(0/255, 163/255, 218/255, 1),
rgb(28/255, 231/255, 131/255, 1),
rgb(15/255, 27/255, 77/255, 1),
rgb(0, 0, 0, 1)
)
ggplot() +
geom_line(data = filter(series_and_movies, Format == "Series"), mapping = aes(x = Premiere_Year, y = Entries, colour = as.factor(Service)), label = "Movie") +
labs(colour = "Streaming Services", title = "Amount of released Series by streaming services", x = "Year", y = "Number of series") +
scale_colour_manual(values = original_colors)
original_colors <- c(rgb(229/255, 9/255, 20/255, 1),
rgb(0/255, 163/255, 218/255, 1),
rgb(28/255, 231/255, 131/255, 1),
rgb(15/255, 27/255, 77/255, 1),
rgb(0, 0, 0, 1)
)
ggplot() +
geom_line(data = percentage_of_series(series_and_movies), mapping = aes(x = Premiere_Year, y = Percentage, colour = as.factor(Service))) +
labs(colour = "Streaming Services", title = "Ratio of series to movies", x = "Year", y = "% of series") +
scale_color_manual(values = original_colors)
series_and_movies <- as_tibble(filter(prem_year %>%
group_by(Service, Premiere_Year = strtoi(Premiere_Year), Format) %>%
summarise(Entries = length(Service)), Format == "Film" | Format == "Series"))
series_and_movies
percentage_of_series <- function(dataframe) {
series_percentages <- data.frame(Service = c(), Premiere_Year = c(), Series_Percentage = c())
services <- c("Netflix", "Amazon Prime Video", "Hulu", "Disney+", "Apple TV+")
years <- c(2000:2020)
for (service in services) {
service_rows <- filter(dataframe, Service == service)
for (year in years) {
nr_series <- sum(pull(filter(service_rows, Format == "Series", Premiere_Year == year), Entries))
nr_films <- sum(pull(filter(service_rows, Format == "Film", Premiere_Year == year), Entries))
series_percentages <- rbind(series_percentages,
data.frame(Service = as.factor(c(service)), Premiere_Year = c(year), Percentage = c(ifelse(nr_series == 0,
ifelse(nr_films == 0, 50, 0), ifelse(nr_films == 0, 100, nr_series / (nr_series + nr_films) * 100)))))
}
}
return(series_percentages)
}
percentage_of_series(series_and_movies)
original_colors <- c(rgb(229/255, 9/255, 20/255, 1),
rgb(0/255, 163/255, 218/255, 1),
rgb(28/255, 231/255, 131/255, 1),
rgb(15/255, 27/255, 77/255, 1),
rgb(0, 0, 0, 1)
)
ggplot() +
geom_line(data = filter(series_and_movies, Format == "Film"), mapping = aes(x = Premiere_Year, y = Entries, colour = as.factor(Service)), label = "Movie") +
labs(colour = "Streaming Services", title = "Amount of released Movies by streaming services", x = "Year", y = "Number of movies") +
scale_colour_manual(values = original_colors)
original_colors <- c(rgb(229/255, 9/255, 20/255, 1),
rgb(0/255, 163/255, 218/255, 1),
rgb(28/255, 231/255, 131/255, 1),
rgb(15/255, 27/255, 77/255, 1),
rgb(0, 0, 0, 1)
)
ggplot() +
geom_line(data = filter(series_and_movies, Format == "Series"), mapping = aes(x = Premiere_Year, y = Entries, colour = as.factor(Service)), label = "Movie") +
labs(colour = "Streaming Services", title = "Amount of released Series by streaming services", x = "Year", y = "Number of series") +
scale_colour_manual(values = original_colors)
original_colors <- c(rgb(229/255, 9/255, 20/255, 1),
rgb(0/255, 163/255, 218/255, 1),
rgb(28/255, 231/255, 131/255, 1),
rgb(15/255, 27/255, 77/255, 1),
rgb(0, 0, 0, 1)
)
ggplot() +
geom_line(data = percentage_of_series(series_and_movies), mapping = aes(x = Premiere_Year, y = Percentage, colour = as.factor(Service))) +
labs(colour = "Streaming Services", title = "Ratio of series to movies", x = "Year", y = "% of series") +
scale_color_manual(values = original_colors)
genre_string <- paste(original_content$Genre, collapse = "/")
genre_vector <- strsplit(genre_string, "/")[[1]]
genre_vector_clean <- gsub(" ", "", genre_vector)
genre_frame = transmute(data.frame(table(genre_vector_clean)),
Genre = genre_vector_clean,
Count = Freq)
top_eight_genres <- function(dataframe) {
arranged_df <- data.frame(Genre = arrange(dataframe, desc(Count))$Genre, Entries = arrange(dataframe, desc(Count))$Count)
top_eight <- data.frame(Genre = c(), Entries = c())
for (i in 1:8) {
top_eight <- rbind(top_eight, arranged_df[i, ])
}
return(top_eight)
}
ggplot(data = as.tibble(top_eight_genres(genre_frame) %>% group_by(Genre) %>% summarise(Entries = strtoi(Entries)))) +
geom_bar(mapping = aes(x = reorder(Genre, Entries), y = Entries), stat = "identity") +
labs(title = "Top 8 most popular genres of all streaming services", x = "Genres", y = "No. of series and movies")
# Adding a column to sort by, will be used as a categorical variable later on
prem_year <- filter(mutate(original_content, Premiere_Year = lubridate::year(Premiere)), Premiere_Year != 2021, !is.na(Premiere_Year))
filter(original_content, is.na(Premiere))
prem_year
original_colors <- c(rgb(229/255, 9/255, 20/255, 1),
rgb(0/255, 163/255, 218/255, 1),
rgb(28/255, 231/255, 131/255, 1),
rgb(148, 31, 138, 1),
rgb(0, 0, 0, 1)
)
# Adding a column to sort by, will be used as a categorical variable later on
prem_year <- filter(mutate(original_content, Premiere_Year = lubridate::year(Premiere)), Premiere_Year != 2021, !is.na(Premiere_Year))
filter(original_content, is.na(Premiere))
prem_year
original_colors <- c(rgb(229/255, 9/255, 20/255, 1),
rgb(0/255, 163/255, 218/255, 1),
rgb(28/255, 231/255, 131/255, 1),
rgb(148 / 255, 31 / 255, 138 / 255, 1),
rgb(0, 0, 0, 1)
)
ggplot(data = prem_year, mapping = aes(x = Premiere_Year, fill = as.factor(Service))) +
geom_bar() +
labs(fill = "Premiere Year", title = "Release Years", x = "Release Year", y = "Number of movies and series") +
scale_fill_manual(values = original_colors)
years <- c(2005:2020)
productions <- function(years, dataframe) {
productions <- c()
for (year in years) {
productions <- c(productions, nrow(filter(select(dataframe, Premiere_Year), Premiere_Year == year)))
}
return(productions)
}
linear_regression <- lm(years ~ productions(years, prem_year), data = filter(prem_year, is.na(match(Premiere_Year, years))))
summary(linear_regression)
plot(linear_regression)
prem_month <- filter(mutate(original_content,
Premiere_Month = as.character(lubridate::month(lubridate::ymd(010101) +
months(lubridate::month(Premiere) - 1), label = TRUE, abbr = TRUE))),
lubridate::year(Premiere) != 2021, !is.na(lubridate::year(Premiere)))
ggplot(data = prem_month, mapping = aes(x = reorder(Premiere_Month, lubridate::month(Premiere)),
fill = as.factor(Service))) +
geom_bar(width = 0.85) +
labs(fill = "Premiere Month", title = "Release Months", x = "Release Month", y = "Number of movies and series") +
scale_fill_manual(values = original_colors)
series_and_movies <- as_tibble(filter(prem_year %>%
group_by(Service, Premiere_Year = strtoi(Premiere_Year), Format) %>%
summarise(Entries = length(Service)), Format == "Film" | Format == "Series"))
series_and_movies
percentage_of_series <- function(dataframe) {
series_percentages <- data.frame(Service = c(), Premiere_Year = c(), Series_Percentage = c())
services <- c("Netflix", "Amazon Prime Video", "Hulu", "Disney+", "Apple TV+")
years <- c(2000:2020)
for (service in services) {
service_rows <- filter(dataframe, Service == service)
for (year in years) {
nr_series <- sum(pull(filter(service_rows, Format == "Series", Premiere_Year == year), Entries))
nr_films <- sum(pull(filter(service_rows, Format == "Film", Premiere_Year == year), Entries))
series_percentages <- rbind(series_percentages,
data.frame(Service = as.factor(c(service)), Premiere_Year = c(year), Percentage = c(ifelse(nr_series == 0,
ifelse(nr_films == 0, 50, 0), ifelse(nr_films == 0, 100, nr_series / (nr_series + nr_films) * 100)))))
}
}
return(series_percentages)
}
percentage_of_series(series_and_movies)
original_colors <- c(rgb(229/255, 9/255, 20/255, 1),
rgb(0/255, 163/255, 218/255, 1),
rgb(28/255, 231/255, 131/255, 1),
rgb(148 / 255, 31 / 255, 138 / 255, 1),
rgb(0, 0, 0, 1)
)
ggplot() +
geom_line(data = filter(series_and_movies, Format == "Film"), mapping = aes(x = Premiere_Year, y = Entries, colour = as.factor(Service)), label = "Movie") +
labs(colour = "Streaming Services", title = "Amount of released Movies by streaming services", x = "Year", y = "Number of movies") +
scale_colour_manual(values = original_colors)
original_colors <- c(rgb(229/255, 9/255, 20/255, 1),
rgb(0/255, 163/255, 218/255, 1),
rgb(28/255, 231/255, 131/255, 1),
rgb(148 / 255, 31 / 255, 138 / 255, 1),
rgb(0, 0, 0, 1)
)
ggplot() +
geom_line(data = filter(series_and_movies, Format == "Series"), mapping = aes(x = Premiere_Year, y = Entries, colour = as.factor(Service)), label = "Movie") +
labs(colour = "Streaming Services", title = "Amount of released Series by streaming services", x = "Year", y = "Number of series") +
scale_colour_manual(values = original_colors)
original_colors <- c(rgb(229/255, 9/255, 20/255, 1),
rgb(0/255, 163/255, 218/255, 1),
rgb(28/255, 231/255, 131/255, 1),
rgb(148 / 255, 31 / 255, 138 / 255, 1),
rgb(0, 0, 0, 1)
)
ggplot() +
geom_line(data = percentage_of_series(series_and_movies), mapping = aes(x = Premiere_Year, y = Percentage, colour = as.factor(Service))) +
labs(colour = "Streaming Services", title = "Ratio of series to movies", x = "Year", y = "% of series") +
scale_color_manual(values = original_colors)
genre_string <- paste(original_content$Genre, collapse = "/")
genre_vector <- strsplit(genre_string, "/")[[1]]
genre_vector_clean <- gsub(" ", "", genre_vector)
genre_frame = transmute(data.frame(table(genre_vector_clean)),
Genre = genre_vector_clean,
Count = Freq)
top_eight_genres <- function(dataframe) {
arranged_df <- data.frame(Genre = arrange(dataframe, desc(Count))$Genre, Entries = arrange(dataframe, desc(Count))$Count)
top_eight <- data.frame(Genre = c(), Entries = c())
for (i in 1:8) {
top_eight <- rbind(top_eight, arranged_df[i, ])
}
return(top_eight)
}
ggplot(data = as.tibble(top_eight_genres(genre_frame) %>% group_by(Genre) %>% summarise(Entries = strtoi(Entries)))) +
geom_bar(mapping = aes(x = reorder(Genre, Entries), y = Entries), stat = "identity") +
labs(title = "Top 8 most popular genres of all streaming services", x = "Genres", y = "No. of series and movies")
# Adding a column to sort by, will be used as a categorical variable later on
prem_year <- filter(mutate(original_content, Premiere_Year = lubridate::year(Premiere)), Premiere_Year != 2021, !is.na(Premiere_Year))
filter(original_content, is.na(Premiere))
prem_year
original_colors <- c(rgb(229/255, 9/255, 20/255, 1),
rgb(0/255, 163/255, 218/255, 1),
rgb(28/255, 231/255, 131/255, 1),
rgb(148 / 255, 31 / 255, 138 / 255, 1),
rgb(0, 0, 0, 1)
)
ggplot(data = prem_year, mapping = aes(x = Premiere_Year, fill = as.factor(Service))) +
geom_bar() +
labs(fill = "Premiere Year", title = "Release Years", x = "Release Year", y = "Number of movies and series") +
scale_fill_manual(values = original_colors)
# Adding a column to sort by, will be used as a categorical variable later on
prem_year <- filter(mutate(original_content, Premiere_Year = lubridate::year(Premiere)), Premiere_Year != 2021, !is.na(Premiere_Year))
original_colors <- c(rgb(229/255, 9/255, 20/255, 1),
rgb(0/255, 163/255, 218/255, 1),
rgb(28/255, 231/255, 131/255, 1),
rgb(148 / 255, 31 / 255, 138 / 255, 1),
rgb(0, 0, 0, 1)
)
ggplot(data = prem_year, mapping = aes(x = Premiere_Year, fill = as.factor(Service))) +
geom_bar() +
labs(fill = "Premiere Year", title = "Release Years", x = "Release Year", y = "Number of movies and series") +
scale_fill_manual(values = original_colors)
years <- c(2005:2020)
productions <- function(years, dataframe) {
productions <- c()
for (year in years) {
productions <- c(productions, nrow(filter(select(dataframe, Premiere_Year), Premiere_Year == year)))
}
return(productions)
}
linear_regression <- lm(years ~ productions(years, prem_year), data = filter(prem_year, is.na(match(Premiere_Year, years))))
summary(linear_regression)
plot(linear_regression)
prem_month <- filter(mutate(original_content,
Premiere_Month = as.character(lubridate::month(lubridate::ymd(010101) +
months(lubridate::month(Premiere) - 1), label = TRUE, abbr = TRUE))),
lubridate::year(Premiere) != 2021, !is.na(lubridate::year(Premiere)))
ggplot(data = prem_month, mapping = aes(x = reorder(Premiere_Month, lubridate::month(Premiere)),
fill = as.factor(Service))) +
geom_bar(width = 0.85) +
labs(fill = "Premiere Month", title = "Release Months", x = "Release Month", y = "Number of movies and series") +
scale_fill_manual(values = original_colors)
series_and_movies <- as_tibble(filter(prem_year %>%
group_by(Service, Premiere_Year = strtoi(Premiere_Year), Format) %>%
summarise(Entries = length(Service)), Format == "Film" | Format == "Series"))
series_and_movies
percentage_of_series <- function(dataframe) {
series_percentages <- data.frame(Service = c(), Premiere_Year = c(), Series_Percentage = c())
services <- c("Netflix", "Amazon Prime Video", "Hulu", "Disney+")
years <- c(2000:2020)
for (service in services) {
service_rows <- filter(dataframe, Service == service)
for (year in years) {
nr_series <- sum(pull(filter(service_rows, Format == "Series", Premiere_Year == year), Entries))
nr_films <- sum(pull(filter(service_rows, Format == "Film", Premiere_Year == year), Entries))
series_percentages <- rbind(series_percentages,
data.frame(Service = as.factor(c(service)), Premiere_Year = c(year), Percentage = c(ifelse(nr_series == 0,
ifelse(nr_films == 0, 50, 0), ifelse(nr_films == 0, 100, nr_series / (nr_series + nr_films) * 100)))))
}
}
return(series_percentages)
}
percentage_of_series(series_and_movies)
original_colors <- c(rgb(229/255, 9/255, 20/255, 1),
rgb(28/255, 231/255, 131/255, 1),
rgb(15/255, 27/255, 77/255, 1)
)
ggplot() +
geom_line(data = filter(series_and_movies, Format == "Film"), mapping = aes(x = Premiere_Year, y = Entries, colour = as.factor(Service)), label = "Movie") +
labs(colour = "Streaming Services", title = "Amount of released Movies by streaming services", x = "Year", y = "Number of movies") +
scale_colour_manual(values = original_colors)
series_and_movies <- as_tibble(filter(prem_year %>%
group_by(Service, Premiere_Year = strtoi(Premiere_Year), Format) %>%
summarise(Entries = length(Service)), Format == "Film" | Format == "Series"))
series_and_movies
percentage_of_series <- function(dataframe) {
series_percentages <- data.frame(Service = c(), Premiere_Year = c(), Series_Percentage = c())
services <- c("Netflix", "Amazon Prime Video", "Hulu", "Disney+")
years <- c(2000:2020)
for (service in services) {
service_rows <- filter(dataframe, Service == service)
for (year in years) {
nr_series <- sum(pull(filter(service_rows, Format == "Series", Premiere_Year == year), Entries))
nr_films <- sum(pull(filter(service_rows, Format == "Film", Premiere_Year == year), Entries))
series_percentages <- rbind(series_percentages,
data.frame(Service = as.factor(c(service)), Premiere_Year = c(year), Percentage = c(ifelse(nr_series == 0,
ifelse(nr_films == 0, 50, 0), ifelse(nr_films == 0, 100, nr_series / (nr_series + nr_films) * 100)))))
}
}
return(series_percentages)
}
percentage_of_series(series_and_movies)
ggplot() +
geom_line(data = filter(series_and_movies, Format == "Film"), mapping = aes(x = Premiere_Year, y = Entries, colour = as.factor(Service)), label = "Movie") +
labs(colour = "Streaming Services", title = "Amount of released Movies by streaming services", x = "Year", y = "Number of movies") +
scale_colour_manual(values = original_colors)
# Adding a column to sort by, will be used as a categorical variable later on
prem_year <- filter(mutate(original_content, Premiere_Year = lubridate::year(Premiere)), Premiere_Year != 2021, !is.na(Premiere_Year))
original_colors <- c(rgb(229/255, 9/255, 20/255, 1),
rgb(0/255, 163/255, 218/255, 1),
rgb(28/255, 231/255, 131/255, 1),
rgb(148 / 255, 31 / 255, 138 / 255, 1),
rgb(0, 0, 0, 1)
)
ggplot(data = prem_year, mapping = aes(x = Premiere_Year, fill = as.factor(Service))) +
geom_bar() +
labs(fill = "Premiere Year", title = "Release Years", x = "Release Year", y = "Number of movies and series") +
scale_fill_manual(values = original_colors)
years <- c(2005:2020)
productions <- function(years, dataframe) {
productions <- c()
for (year in years) {
productions <- c(productions, nrow(filter(select(dataframe, Premiere_Year), Premiere_Year == year)))
}
return(productions)
}
linear_regression <- lm(years ~ productions(years, prem_year), data = filter(prem_year, is.na(match(Premiere_Year, years))))
summary(linear_regression)
plot(linear_regression)
prem_month <- filter(mutate(original_content,
Premiere_Month = as.character(lubridate::month(lubridate::ymd(010101) +
months(lubridate::month(Premiere) - 1), label = TRUE, abbr = TRUE))),
lubridate::year(Premiere) != 2021, !is.na(lubridate::year(Premiere)))
ggplot(data = prem_month, mapping = aes(x = reorder(Premiere_Month, lubridate::month(Premiere)),
fill = as.factor(Service))) +
geom_bar(width = 0.85) +
labs(fill = "Premiere Month", title = "Release Months", x = "Release Month", y = "Number of movies and series") +
scale_fill_manual(values = original_colors)
series_and_movies <- as_tibble(filter(prem_year %>%
group_by(Service, Premiere_Year = strtoi(Premiere_Year), Format) %>%
summarise(Entries = length(Service)), Format == "Film" | Format == "Series"))
series_and_movies
percentage_of_series <- function(dataframe) {
series_percentages <- data.frame(Service = c(), Premiere_Year = c(), Series_Percentage = c())
services <- c("Netflix", "Amazon Prime Video", "Hulu", "Disney+")
years <- c(2000:2020)
for (service in services) {
service_rows <- filter(dataframe, Service == service)
for (year in years) {
nr_series <- sum(pull(filter(service_rows, Format == "Series", Premiere_Year == year), Entries))
nr_films <- sum(pull(filter(service_rows, Format == "Film", Premiere_Year == year), Entries))
series_percentages <- rbind(series_percentages,
data.frame(Service = as.factor(c(service)), Premiere_Year = c(year), Percentage = c(ifelse(nr_series == 0,
ifelse(nr_films == 0, 50, 0), ifelse(nr_films == 0, 100, nr_series / (nr_series + nr_films) * 100)))))
}
}
return(series_percentages)
}
percentage_of_series(series_and_movies)
ggplot() +
geom_line(data = filter(series_and_movies, Format == "Film"), mapping = aes(x = Premiere_Year, y = Entries, colour = as.factor(Service)), label = "Movie") +
labs(colour = "Streaming Services", title = "Amount of released Movies by streaming services", x = "Year", y = "Number of movies") +
scale_colour_manual(values = original_colors)
ggplot() +
geom_line(data = filter(series_and_movies, Format == "Series"), mapping = aes(x = Premiere_Year, y = Entries, colour = as.factor(Service)), label = "Movie") +
labs(colour = "Streaming Services", title = "Amount of released Series by streaming services", x = "Year", y = "Number of series") +
scale_colour_manual(values = original_colors)
ggplot() +
geom_line(data = percentage_of_series(series_and_movies), mapping = aes(x = Premiere_Year, y = Percentage, colour = as.factor(Service))) +
labs(colour = "Streaming Services", title = "Ratio of series to movies", x = "Year", y = "% of series") +
scale_color_manual(values = original_colors)
series_and_movies <- as_tibble(filter(prem_year %>%
group_by(Service, Premiere_Year = strtoi(Premiere_Year), Format) %>%
summarise(Entries = length(Service)), Format == "Film" | Format == "Series"))
series_and_movies
percentage_of_series <- function(dataframe) {
series_percentages <- data.frame(Service = c(), Premiere_Year = c(), Series_Percentage = c())
services <- c("Netflix", "Amazon Prime Video", "Hulu", "Disney+", "Apple TV+")
years <- c(2000:2020)
for (service in services) {
service_rows <- filter(dataframe, Service == service)
for (year in years) {
nr_series <- sum(pull(filter(service_rows, Format == "Series", Premiere_Year == year), Entries))
nr_films <- sum(pull(filter(service_rows, Format == "Film", Premiere_Year == year), Entries))
series_percentages <- rbind(series_percentages,
data.frame(Service = as.factor(c(service)), Premiere_Year = c(year), Percentage = c(ifelse(nr_series == 0,
ifelse(nr_films == 0, 50, 0), ifelse(nr_films == 0, 100, nr_series / (nr_series + nr_films) * 100)))))
}
}
return(series_percentages)
}
percentage_of_series(series_and_movies)
ggplot() +
geom_line(data = filter(series_and_movies, Format == "Film"), mapping = aes(x = Premiere_Year, y = Entries, colour = as.factor(Service)), label = "Movie") +
labs(colour = "Streaming Services", title = "Amount of released Movies by streaming services", x = "Year", y = "Number of movies") +
scale_colour_manual(values = original_colors)
ggplot() +
geom_line(data = filter(series_and_movies, Format == "Series"), mapping = aes(x = Premiere_Year, y = Entries, colour = as.factor(Service)), label = "Movie") +
labs(colour = "Streaming Services", title = "Amount of released Series by streaming services", x = "Year", y = "Number of series") +
scale_colour_manual(values = original_colors)
ggplot() +
geom_line(data = percentage_of_series(series_and_movies), mapping = aes(x = Premiere_Year, y = Percentage, colour = as.factor(Service))) +
labs(colour = "Streaming Services", title = "Ratio of series to movies", x = "Year", y = "% of series") +
scale_color_manual(values = original_colors)
