Network = NA,
Region = NA)
apple_originals <- rbind(apple_originals_1, apple_originals_2)
apple_originals <- rbind(apple_originals, apple_originals_3)
apple_originals <- rbind(apple_originals, apple_originals_4)
apple_originals <- rbind(apple_originals, apple_originals_5)
apple_originals <- rbind(apple_originals, apple_originals_6)
apple_originals <- rbind(apple_originals, apple_originals_7)
apple_originals <- rbind(apple_originals, apple_originals_8)
apple_originals <- rbind(apple_originals, apple_originals_9)
apple_originals <- rbind(apple_originals, apple_originals_10)
apple_originals <- rbind(apple_originals, apple_originals_11)
apple_originals <- rbind(apple_originals, apple_originals_12)
apple_originals <- rbind(apple_originals, apple_originals_13)
apple_originals <- rbind(apple_originals, apple_originals_14)
apple_originals <- rbind(apple_originals, apple_originals_15)
apple_originals <- rbind(apple_originals, apple_originals_16)
apple_originals <- rbind(apple_originals, apple_originals_17)
apple_originals <- rbind(apple_originals, apple_originals_18)
apple_originals <- rbind(apple_originals, apple_originals_19)
apple_originals <- rbind(apple_originals, apple_originals_20)
apple_originals <- rbind(apple_originals, apple_originals_21)
unique(select(apple_originals, Status))
apple_originals <- transmute(apple_originals,
Title = Title,
Genre = Genre,
Premiere = Premiere,
Seasons = Seasons,
Runtime = Runtime,
Language = Language,
Status = parse_factor(only_keep(Status, "(Renewed|Pending|Miniseries|Awaiting release|Event|Development|Ended|Film|Special|Distribution)"), levels = statuses),
Service = parse_factor("Apple TV+", levels = services),
Format = parse_factor(only_keep(Format, "(Series|Miniseries|Film|Special)"), levels = formats),
Origin = parse_factor(only_keep(Origin, "(Continuation|Distribution|Original)"), levels = origins),
Network = Network,
Region = Region)
apple_originals
rm(list = ls(pattern = "_originals_[0-9]+"))
netflix_originals <- filter(netflix_originals,
!grepl("Pending|pending", Title),
Title != "Awaiting release",
!grepl("Miniseries|miniseries", Title),
!grepl("Renewed|renewed", Title),
!grepl("due to premiere", Title))
netflix_originals
netflix <- transmute(netflix_originals,
Title = Title,
Genre = genres_to_uppercase_unique(str_replace_all(
str_squish(
str_replace_all(
str_replace_all(
str_replace_all(
str_replace_all(
str_replace_all(Genre, "series|procedural", ""),
"Science fiction", "Science-Fiction"),
"(C|c)oming-of-age ", ""),
"(C|c)omedy-(D|d)rama", "Dramedy"),
"(Docu|docu).*", "Documentary")
),
"/| ", " / ")),
Premiere = as.Date(str_replace_all(str_replace_all(Premiere, ",", ""), " ", "-"), "%B-%d-%Y"),
Episodes = strtoi(ifelse(!is.na(str_match(Seasons, "([0-9]+) (episode*)")[,2]),
str_match(Seasons, "([0-9]+) (episode*)")[,2],
NA)),
Seasons = strtoi(ifelse(!is.na(str_match(Seasons, "([0-9]) (season.*|part.*|volume.*)")[,2]),
str_match(Seasons, "([0-9]) (season.*|part.*|volume.*)")[,2],
NA)),
Min_Time = strtoi(ifelse(!is.na(str_match(Runtime, "([0-9]+)-([0-9]+)")[,2]),
str_match(Runtime, "([0-9]+)-([0-9]+)")[,2],
str_match(Runtime, "([0-9]+)")[,2])),
Max_Time = strtoi(ifelse(!is.na(str_match(Runtime, "([0-9]+)-([0-9]+)")[,3]),
str_match(Runtime, "([0-9]+)-([0-9]+)")[,3],
str_match(Runtime, "([0-9]+)")[,2])),
Language = Language,
Status = Status,
Service = Service,
Format = as.factor(Format),
Origin = as.factor(Origin),
Network = as.factor(Network),
Region = as.factor(Region)
)
netflix
amazon_originals <- filter(amazon_originals,
!grepl("Pending|pending", Title),
Title != "Awaiting release",
!grepl("Miniseries|miniseries", Title),
!grepl("Renewed|renewed", Title),
!grepl("due to premiere", Title))
amazon_originals
amazon <- transmute(amazon_originals,
Title = Title,
Genre = genres_to_uppercase_unique(str_replace_all(
str_squish(
str_replace_all(
str_replace_all(
str_replace_all(
str_replace_all(
str_replace_all(Genre, "series|procedural", ""),
"Science fiction", "Science-Fiction"),
"(C|c)oming-of-age ", ""),
"(C|c)omedy-(D|d)rama", "Dramedy"),
"(Docu|docu).*", "Documentary")
),
"/| ", " / ")),
Premiere = as.Date(str_replace_all(str_replace_all(Premiere, ",", ""), " ", "-"), "%B-%d-%Y"),
Episodes = strtoi(ifelse(!is.na(str_match(Seasons, "([0-9]+) (episode*)")[,2]),
str_match(Seasons, "([0-9]+) (episode*)")[,2],
NA)),
Seasons = strtoi(ifelse(!is.na(str_match(Seasons, "([0-9]) (season.*|part.*|volume.*)")[,2]),
str_match(Seasons, "([0-9]) (season.*|part.*|volume.*)")[,2],
NA)),
Min_Time = strtoi(ifelse(!is.na(str_match(Runtime, "([0-9]+)-([0-9]+)")[,2]),
str_match(Runtime, "([0-9]+)-([0-9]+)")[,2],
str_match(Runtime, "([0-9]+)")[,2])),
Max_Time = strtoi(ifelse(!is.na(str_match(Runtime, "([0-9]+)-([0-9]+)")[,3]),
str_match(Runtime, "([0-9]+)-([0-9]+)")[,3],
str_match(Runtime, "([0-9]+)")[,2])),
Language = Language,
Status = Status,
Service = Service,
Format = as.factor(Format),
Origin = as.factor(Origin),
Network = as.factor(Network),
Region = as.factor(Region)
)
hulu_originals <- filter(hulu_originals,
!grepl("Pending|pending", Title),
Title != "Awaiting release",
!grepl("Miniseries|miniseries", Title),
!grepl("Renewed|renewed", Title),
!grepl("due to premiere", Title))
hulu_originals
hulu <- transmute(hulu_originals,
Title = Title,
Genre = genres_to_uppercase_unique(str_replace_all(
str_squish(
str_replace_all(
str_replace_all(
str_replace_all(
str_replace_all(
str_replace_all(Genre, "series|procedural", ""),
"Science fiction", "Science-Fiction"),
"(C|c)oming-of-age ", ""),
"(C|c)omedy-(D|d)rama", "Dramedy"),
"(Docu|docu).*", "Documentary")
),
"/| ", " / ")),
Premiere = as.Date(str_replace_all(str_replace_all(Premiere, ",", ""), " ", "-"), "%B-%d-%Y"),
Episodes = strtoi(ifelse(!is.na(str_match(Seasons, "([0-9]+) (episode*)")[,2]),
str_match(Seasons, "([0-9]+) (episode*)")[,2],
NA)),
Seasons = strtoi(ifelse(!is.na(str_match(Seasons, "([0-9]) (season.*|part.*|volume.*)")[,2]),
str_match(Seasons, "([0-9]) (season.*|part.*|volume.*)")[,2],
NA)),
Min_Time = strtoi(ifelse(!is.na(str_match(Runtime, "([0-9]+)-([0-9]+)")[,2]),
str_match(Runtime, "([0-9]+)-([0-9]+)")[,2],
str_match(Runtime, "([0-9]+)")[,2])),
Max_Time = strtoi(ifelse(!is.na(str_match(Runtime, "([0-9]+)-([0-9]+)")[,3]),
str_match(Runtime, "([0-9]+)-([0-9]+)")[,3],
str_match(Runtime, "([0-9]+)")[,2])),
Language = Language,
Status = Status,
Service = Service,
Format = as.factor(Format),
Origin = as.factor(Origin),
Network = as.factor(Network),
Region = as.factor(Region)
)
hulu
disney_originals <- filter(disney_originals,
!grepl("Pending|pending", Title),
Title != "Awaiting release",
!grepl("Miniseries|miniseries", Title),
!grepl("Renewed|renewed", Title),
!grepl("due to premiere", Title))
disney_originals
disney <- transmute(disney_originals,
Title = Title,
Genre = genres_to_uppercase_unique(str_replace_all(
str_squish(
str_replace_all(
str_replace_all(
str_replace_all(
str_replace_all(
str_replace_all(Genre, "series|procedural", ""),
"Science fiction", "Science-Fiction"),
"(C|c)oming-of-age ", ""),
"(C|c)omedy-(D|d)rama", "Dramedy"),
"(Docu|docu).*", "Documentary")
),
"/| ", " / ")),
Premiere = as.Date(str_replace_all(str_replace_all(Premiere, ",", ""), " ", "-"), "%B-%d-%Y"),
Episodes = strtoi(ifelse(!is.na(str_match(Seasons, "([0-9]+) (episode*)")[,2]),
str_match(Seasons, "([0-9]+) (episode*)")[,2],
NA)),
Seasons = strtoi(ifelse(!is.na(str_match(Seasons, "([0-9]) (season.*|part.*|volume.*)")[,2]),
str_match(Seasons, "([0-9]) (season.*|part.*|volume.*)")[,2],
NA)),
Min_Time = strtoi(ifelse(!is.na(str_match(Runtime, "([0-9]+)-([0-9]+)")[,2]),
str_match(Runtime, "([0-9]+)-([0-9]+)")[,2],
str_match(Runtime, "([0-9]+)")[,2])),
Max_Time = strtoi(ifelse(!is.na(str_match(Runtime, "([0-9]+)-([0-9]+)")[,3]),
str_match(Runtime, "([0-9]+)-([0-9]+)")[,3],
str_match(Runtime, "([0-9]+)")[,2])),
Language = Language,
Status = Status,
Service = Service,
Format = as.factor(Format),
Origin = as.factor(Origin),
Network = as.factor(Network),
Region = as.factor(Region)
)
disney
apple_originals <- filter(apple_originals,
!grepl("Pending|pending", Title),
Title != "Awaiting release",
!grepl("Miniseries|miniseries", Title),
!grepl("Renewed|renewed", Title),
!grepl("due to premiere", Title))
apple_originals
apple <- transmute(apple_originals,
Title = Title,
Genre = genres_to_uppercase_unique(str_replace_all(
str_squish(
str_replace_all(
str_replace_all(
str_replace_all(
str_replace_all(
str_replace_all(Genre, "series|procedural", ""),
"Science fiction", "Science-Fiction"),
"(C|c)oming-of-age ", ""),
"(C|c)omedy-(D|d)rama", "Dramedy"),
"(Docu|docu).*", "Documentary")
),
"/| ", " / ")),
Premiere = as.Date(str_replace_all(str_replace_all(Premiere, ",", ""), " ", "-"), "%B-%d-%Y"),
Episodes = strtoi(ifelse(!is.na(str_match(Seasons, "([0-9]+) (episode*)")[,2]),
str_match(Seasons, "([0-9]+) (episode*)")[,2],
NA)),
Seasons = strtoi(ifelse(!is.na(str_match(Seasons, "([0-9]) (season.*|part.*|volume.*)")[,2]),
str_match(Seasons, "([0-9]) (season.*|part.*|volume.*)")[,2],
NA)),
Min_Time = strtoi(ifelse(!is.na(str_match(Runtime, "([0-9]+)-([0-9]+)")[,2]),
str_match(Runtime, "([0-9]+)-([0-9]+)")[,2],
str_match(Runtime, "([0-9]+)")[,2])),
Max_Time = strtoi(ifelse(!is.na(str_match(Runtime, "([0-9]+)-([0-9]+)")[,3]),
str_match(Runtime, "([0-9]+)-([0-9]+)")[,3],
str_match(Runtime, "([0-9]+)")[,2])),
Language = Language,
Status = Status,
Service = Service,
Format = as.factor(Format),
Origin = as.factor(Origin),
Network = as.factor(Network),
Region = as.factor(Region)
)
apple
#original_content <- rbind(netflix, amazon)
original_content <- rbind(netflix, hulu)
original_content <- rbind(original_content, disney)
original_content <- rbind(original_content, apple)
original_content
# Adding a column to sort by, will be used as a categorical variable later on
prem_year <- filter(mutate(original_content, Premiere_Year = lubridate::year(Premiere)), !Premiere_Year == 2021, !is.na(Premiere_Year))
original_colors <- c(rgb(229/255, 9/255, 20/255, 1),
rgb(0/255, 163/255, 218/255, 1),
rgb(28/255, 231/255, 131/255, 1),
rgb(15/255, 27/255, 77/255, 1)
)
ggplot(data = prem_year, mapping = aes(x = Premiere_Year, fill = as.factor(Service))) +
geom_bar() +
labs(fill = "Premiere Year", title = "Release Years", x = "Release Year", y = "Number of movies and series") +
scale_fill_manual(values = original_colors)
years <- c(2005:2020)
productions <- function(years, dataframe) {
productions <- c()
for (year in years) {
productions <- c(productions, nrow(filter(select(dataframe, Premiere_Year), Premiere_Year == year)))
}
return(productions)
}
linear_regression <- lm(years ~ productions(years, prem_year), data = filter(prem_year, is.na(match(Premiere_Year, years))))
summary(linear_regression)
plot(linear_regression)
prem_month <- filter(mutate(original_content,
Premiere_Month = as.character(lubridate::month(lubridate::ymd(010101) +
months(lubridate::month(Premiere) - 1), label = TRUE, abbr = TRUE))),
lubridate::year(Premiere) != 2021, !is.na(lubridate::year(Premiere)))
ggplot(data = prem_month, mapping = aes(x = reorder(Premiere_Month, lubridate::month(Premiere)),
fill = as.factor(Service))) +
geom_bar(width = 0.85) +
labs(fill = "Premiere Month", title = "Release Months", x = "Release Month", y = "Number of movies and series") +
scale_fill_manual(values = original_colors)
series_and_movies <- as_tibble(filter(prem_year %>%
group_by(Service, Premiere_Year = strtoi(Premiere_Year), Format) %>%
summarise(Entries = length(Service)), Format == "Film" | Format == "Series"))
series_and_movies
percentage_of_series <- function(dataframe) {
series_percentages <- data.frame(Service = c(), Premiere_Year = c(), Series_Percentage = c())
services <- c("Netflix", "Amazon Prime Video", "Hulu", "Disney+")
years <- c(2000:2020)
for (service in services) {
service_rows <- filter(dataframe, Service == service)
for (year in years) {
nr_series <- sum(pull(filter(service_rows, Format == "Series", Premiere_Year == year), Entries))
nr_films <- sum(pull(filter(service_rows, Format == "Film", Premiere_Year == year), Entries))
series_percentages <- rbind(series_percentages,
data.frame(Service = as.factor(c(service)), Premiere_Year = c(year), Percentage = c(ifelse(nr_series == 0,
ifelse(nr_films == 0, 50, 0), ifelse(nr_films == 0, 100, nr_series / (nr_series + nr_films) * 100)))))
}
}
return(series_percentages)
}
percentage_of_series(series_and_movies)
original_colors <- c(rgb(229/255, 9/255, 20/255, 1),
rgb(28/255, 231/255, 131/255, 1),
rgb(15/255, 27/255, 77/255, 1)
)
ggplot() +
geom_line(data = filter(series_and_movies, Format == "Film"), mapping = aes(x = Premiere_Year, y = Entries, colour = as.factor(Service)), label = "Movie") +
labs(colour = "Streaming Services", title = "Amount of released Movies by streaming services", x = "Year", y = "Number of movies") +
scale_colour_manual(values = original_colors)
movies <- read_csv("../datasets/movies.csv")
movies <- read_csv("../datasets/movies.csv")
movies <- read_csv("../datasets/movies.csv")
movies
movies <- read_csv("../datasets/movies.csv")
movies <- transmute(movies,
Title = Title,
Year = Year,
Age = Age,
IMDb = IMDb,
`Rotten Tomatoes` = `Rotten Tomatoes`,
Netflix = Netflix,
Hulu = Hulu,
`Prime Video` = `Prime Video`,
`Disney+` = `Disney+`,
Type = Type,
Directors = Directors,
Genres = Genres,
Country = Country,
Language = Language,
Runtime = Runtime)
movies
movies <- read_csv("../datasets/movies.csv")
movies <- transmute(movies,
Title = Title,
Year = Year,
Age = Age,
IMDb = IMDb,
`Rotten Tomatoes` = `Rotten Tomatoes`,
Netflix = Netflix > 0,
Hulu = Hulu > 0,
`Prime Video` = `Prime Video` > 0,
`Disney+` = `Disney+` > 0,
`Apple TV+` = FALSE,
Type = Type,
Directors = Directors,
Genres = Genres,
Country = Country,
Language = Language,
Runtime = Runtime)
movies
movies <- read_csv("../datasets/movies.csv")
movies <- transmute(movies,
Title = Title,
Year = Year,
Age = Age,
IMDb = IMDb,
`Rotten Tomatoes` = `Rotten Tomatoes`,
Netflix = Netflix > 0,
Hulu = Hulu > 0,
`Prime Video` = `Prime Video` > 0,
`Disney+` = `Disney+` > 0,
`Apple TV+` = FALSE,
Type = Type,
Directors = Directors,
Genres = Genres,
Country = Country,
Language = Language,
Runtime = Runtime)
movies
natural_joined <- inner_join(movies, netflix_originals)
natural_joined <- inner_join(movies, original_content)
natural_joined
natural_joined <- inner_join(movies, original_content, by = NULL)
natural_joined
natural_joined <- inner_join(movies, original_content, by = Title)
natural_joined <- inner_join(movies, original_content, by = "Title")
natural_joined
natural_joined <- full_join(movies, original_content, by = "Title")
natural_joined
movies <- read_csv("../datasets/movies.csv")
movies <- transmute(movies,
Title = Title,
Genres = Genres,
Year = Year,
Age = Age,
Runtime = Runtime,
IMDb = IMDb,
`Rotten Tomatoes` = `Rotten Tomatoes`,
Netflix = Netflix > 0,
Hulu = Hulu > 0,
`Prime Video` = `Prime Video` > 0,
`Disney+` = `Disney+` > 0,
`Apple TV+` = FALSE,
Type = Type,
Directors = Directors,
Country = Country,
Language = Language)
movies
movies <- read_csv("../datasets/movies.csv")
movies <- transmute(movies,
Title = Title,
Genres = str_replace_all(Genres, ",", " / "),
Year = Year,
Age = Age,
Runtime = Runtime,
IMDb = IMDb,
`Rotten Tomatoes` = `Rotten Tomatoes`,
Netflix = Netflix > 0,
Hulu = Hulu > 0,
`Prime Video` = `Prime Video` > 0,
`Disney+` = `Disney+` > 0,
`Apple TV+` = FALSE,
Type = Type,
Directors = Directors,
Country = Country,
Language = Language)
movies
movies <- read_csv("../datasets/movies.csv")
movies <- transmute(movies,
Title = Title,
Genre = str_replace_all(Genres, ",", " / "),
Year = Year,
Age = Age,
Runtime = Runtime,
IMDb = IMDb,
`Rotten Tomatoes` = `Rotten Tomatoes`,
Netflix = Netflix > 0,
Hulu = Hulu > 0,
`Prime Video` = `Prime Video` > 0,
`Disney+` = `Disney+` > 0,
`Apple TV+` = FALSE,
Type = Type,
Directors = Directors,
Country = Country,
Language = Language)
movies
natural_joined <- full_join(movies, original_content, by = "Title")
natural_joined
natural_joined <- full_join(movies, original_content, by = "Title", ALL.x = TRUE)
natural_joined
natural_joined <- right_join(movies, original_content, by = "Title")
natural_joined
natural_joined <- right_join(movies, original_content, by = NULL)
natural_joined
natural_joined <- right_join(movies, original_content, by = "Title")
natural_joined
natural_joined <- right_join(movies, original_content, by = "Title")
natural_joined
natural_joined <- full_join(movies, original_content, by = "Title")
natural_joined
natural_joined <- full_join(movies, original_content, by = "Title")
natural_joined <- mutate(natural_joined, `Genre.x` = ifelse(is.na(`Genre.x`), `Genre.y`, `Genre.x`))
natural_joined
natural_joined <- full_join(movies, original_content, by = "Title")
natural_joined <- mutate(natural_joined, `Genre.x` = ifelse(is.na(`Genre.x`), `Genre.y`, `Genre.x`))
natural_joined
select(unique(natural_joined$`Genre.x`))
natural_joined <- full_join(movies, original_content, by = "Title")
natural_joined <- mutate(natural_joined, `Genre.x` = ifelse(is.na(`Genre.x`), `Genre.y`, `Genre.x`))
natural_joined
unique(select(natural_joined$`Genre.x`))
natural_joined <- full_join(movies, original_content, by = "Title")
natural_joined <- mutate(natural_joined, `Genre.x` = ifelse(is.na(`Genre.x`), `Genre.y`, `Genre.x`))
natural_joined
unique(select(natural_joined, `Genre.x`))
natural_joined <- full_join(movies, original_content, by = "Title")
natural_joined <- mutate(natural_joined, `Genre.x` = ifelse(is.na(`Genre.x`), `Genre.y`, `Genre.x`))
natural_joined[, !(names(natural_joined) %in% c("Genre.y"))]
natural_joined
unique(select(natural_joined, `Genre.x`))
natural_joined <- full_join(movies, original_content, by = "Title")
natural_joined <- mutate(natural_joined, `Genre.x` = ifelse(is.na(`Genre.x`), `Genre.y`, `Genre.x`))
natural_joined <- natural_joined[, !(names(natural_joined) %in% c("Genre.y"))]
natural_joined
unique(select(natural_joined, `Genre.x`))
movies <- read_csv("../datasets/movies.csv")
movies <- transmute(movies,
Title = Title,
Genre = str_replace_all(Genres, ",", " / "),
Year = Year,
Age = Age,
Runtime = Runtime,
IMDb = IMDb,
`Rotten Tomatoes` = `Rotten Tomatoes`,
Netflix = Netflix > 0,
Hulu = Hulu > 0,
`Prime Video` = `Prime Video` > 0,
`Disney+` = `Disney+` > 0,
`Apple TV+` = FALSE,
Type = Type,
Directors = Directors,
Country = Country,
Language = str_replace_all(Language, ",", " / "))
movies
natural_joined <- full_join(movies, original_content, by = "Title")
natural_joined <- mutate(natural_joined, `Genre.x` = ifelse(is.na(`Genre.x`), `Genre.y`, `Genre.x`))
natural_joined <- natural_joined[, !(names(natural_joined) %in% c("Genre.y"))]
natural_joined
unique(select(natural_joined, `Genre.x`))
